'use client';

import { Contacts } from '@hmny.dev/lib/data';
import { Center, OrbitControls, useGLTF } from '@react-three/drei';
import { Canvas, ThreeEvent, useLoader } from '@react-three/fiber';
import * as UIKit from '@react-three/uikit';
import { useEffect } from 'react';
import * as THREE from 'three';

function Phone() {
  // Loads the GLTF model asynchronously
  const { nodes, materials } = useGLTF('/3d-models/Phone.gltf') as any;
  // Uses the given video as animated texture for the 'SCREEN' mesh
  const texture = useLoader(THREE.TextureLoader, '/Stripes.png');

  useEffect(() => {
    // Scales down by x3 the texture (by default is way too zoomed)
    texture.repeat.set(2, 2.88);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
  }, [nodes.SCREEN.geometry, texture]);

  // The view was auto-generated by: https://github.com/pmndrs/gltfjsxposition but VideoTexture was added afterwards
  return (
    <group rotation={[0, -75, 0]}>
      <group position={[0, 1.56, 0]}>
        <mesh geometry={nodes.Circle038.geometry} material={nodes.Circle038.material} />
        <mesh geometry={nodes.Circle038_1.geometry} material={materials['Front.001']} />
        <mesh geometry={nodes.Circle038_2.geometry} material={nodes.Circle038_2.material} />
        <mesh geometry={nodes.Circle038_3.geometry} material={materials['BackGrey.001']} />
        <mesh geometry={nodes.Circle038_4.geometry} material={materials['Rubber.001']} />
        <mesh
          geometry={nodes.AntennaLineTop001.geometry}
          material={nodes.AntennaLineTop001.material}
          position={[0, 0.02, 0]}
        />
        <mesh
          geometry={nodes.AntennaLineBottom001.geometry}
          material={nodes.AntennaLineBottom001.material}
          position={[0, -2.68, 0]}
        />
        <mesh
          geometry={nodes.AppleLogo001.geometry}
          material={materials['AppleLogo.001']}
          position={[0.17, 0.52, -0.08]}
        />
        <mesh
          geometry={nodes.BackCameraBottomLens001.geometry}
          material={nodes.BackCameraBottomLens001.material}
          position={[0.7, 0.88, -0.08]}
        />
        <mesh
          geometry={nodes.BackCameraBottomGreyRing001.geometry}
          material={nodes.BackCameraBottomGreyRing001.material}
          position={[0.7, 0.88, -0.09]}
        />
        <mesh
          geometry={nodes.BackCameraTopLens001.geometry}
          material={nodes.BackCameraTopLens001.material}
          position={[0.7, 1.18, -0.08]}
        />
        <mesh
          geometry={nodes.BackCameraP1001.geometry}
          material={materials['Black.015']}
          position={[0.7, 1.03, -0.09]}
        />
        <mesh
          geometry={nodes.FrontSpeakerBG001.geometry}
          material={materials['FrontSpeaker.001']}
          position={[0.16, 1.32, 0.08]}
        />
        <mesh
          geometry={nodes.FrontCameraContainer001.geometry}
          material={materials['FrontCameraBlack.002']}
          position={[0.34, 1.32, 0.08]}
        />
        <mesh
          geometry={nodes.CameraBump001.geometry}
          material={nodes.CameraBump001.material}
          position={[0.7, 1.04, -0.08]}
        />
        <mesh
          geometry={nodes.MuteSwitch001.geometry}
          material={nodes.MuteSwitch001.material}
          position={[-0.65, 0.92, 0.01]}
        />
        <mesh
          geometry={nodes.iPhoneLogo001.geometry}
          material={materials['iPhoneLogo.001']}
          position={[0.2, -1.18, -0.08]}
        />
        <mesh
          geometry={nodes.BackCameraTopGreyRing001.geometry}
          material={nodes.BackCameraTopGreyRing001.material}
          position={[0.7, 1.18, -0.09]}
        />
        <group position={[0.98, -0.04, 0]}>
          <mesh geometry={nodes.Circle031.geometry} material={materials['Black.014']} />
          <mesh geometry={nodes.Circle031_1.geometry} material={nodes.Circle031_1.material} />
        </group>
        <mesh
          geometry={nodes.VolumeButtons001.geometry}
          material={nodes.VolumeButtons001.material}
          position={[-0.66, 0.21, 0]}
        />
        <group position={[0.97, 0.56, 0]}>
          <mesh geometry={nodes.Circle032.geometry} material={nodes.Circle032.material} />
          <mesh geometry={nodes.Circle032_1.geometry} material={nodes.Circle032_1.material} />
        </group>
        <mesh geometry={nodes.SCREEN.geometry}>
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>

      <group position={[0.4, 0, 0.1]}>
        <UIKit.Root
          width={150}
          height={240}
          positionTop={-150}
          positionRight={23}
          flexWrap='wrap'
          flexDirection='row'
          alignItems='center'
          justifyContent='center'
        >
          <UIKit.Text marginTop={2} color='black' width='90%' fontSize={13} textAlign='center'>
            Click on the app icon to open the link on a new tab
          </UIKit.Text>
          <UIKit.Container
            width='100%'
            height='50%'
            flexWrap='wrap'
            flexDirection='row'
            alignItems='center'
            justifyContent='space-evenly'
          >
            {Contacts.map(c => (
              <UIKit.Container
                key={c.name}
                width={30}
                margin={5}
                cursor='pointer'
                alignItems='center'
                flexDirection='column'
                onClick={(event: ThreeEvent<MouseEvent>) => {
                  window.open(c.link, '_blank');
                  event.stopPropagation();
                }}
              >
                <UIKit.Image width={28} height={28} src={c.icon} />
                <UIKit.Text marginTop={1} color='white' fontSize={10} textAlign='center'>
                  {c.name}
                </UIKit.Text>
              </UIKit.Container>
            ))}
          </UIKit.Container>
        </UIKit.Root>
      </group>
    </group>
  );
}

export default function Playground() {
  return (
    <Canvas camera={{ position: [0, 0, 4], fov: 55 }} style={{ width: '100%', height: '100%' }}>
      {/* Generic and simple diffusion lighting */}
      <ambientLight />
      {/* Studio-like lighting (top-left-behind, top-right-behind, refractive light on the bottom) */}
      <directionalLight position={[1, 4, 0]} intensity={1} />
      <directionalLight position={[-1, 4, 0]} intensity={1} />
      <directionalLight position={[4, -6, -4]} intensity={1} />

      {/* Simple iPhone X model with looped video as the screen material */}
      <Center>
        <Phone />
      </Center>

      <OrbitControls enableZoom={true} enablePan={false} />
    </Canvas>
  );
}
