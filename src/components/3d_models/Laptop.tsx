'use client';

import { useSpring } from '@react-spring/core';
import { a as three } from '@react-spring/three';
import { OrbitControls, useGLTF } from '@react-three/drei';
import { Canvas, useFrame } from '@react-three/fiber';
import { useEffect, useMemo, useRef, useState } from 'react';
import { Group, MathUtils } from 'three';

function Laptop() {
  // Gets a mutable reference to the 'main' group for the model
  const group = useRef<Group>(null!);
  // Loads the GLTF model asynchronously
  const { nodes, materials } = useGLTF('/3d-models/Laptop.glb') as any;

  // Take care of cursor state 'onHover' and trigger the animation with 'onClick'
  const [isHovered, setHovered] = useState(false);
  const [isClicked, setClicked] = useState(false);

  // We turn this into a spring animation that interpolates between 0 and 1
  const { open } = useSpring({ open: Number(isClicked) });
  // The hinge value is interpolated based on the progressive 'open' animation
  const hinge = useMemo(() => open.to([0, 1], [1.575, -0.425]), [open]);

  useEffect(() => void (document.body.style.cursor = isHovered ? 'pointer' : 'auto'), [isHovered]);

  // When mounting for the first time the component 'hints' the user w/ an automatic animation
  useEffect(() => {
    const id = setTimeout(() => setClicked(true), 1000);
    return () => clearTimeout(id);
  }, []);

  useFrame(state => {
    const t = state.clock.getElapsedTime();
    // Make it float in the air in perpetuity
    group.current.rotation.x = MathUtils.lerp(group.current.rotation.x, Math.cos(t / 10) / 10 + 0.25, 0.1);
    group.current.rotation.y = MathUtils.lerp(group.current.rotation.y, Math.sin(t / 10) / 4, 0.1);
    group.current.rotation.z = MathUtils.lerp(group.current.rotation.z, Math.sin(t / 10) / 10, 0.1);
    // Slowly rotates the group to the right
    group.current.position.y = MathUtils.lerp(group.current.position.y, (-2 + Math.sin(t)) / 3, 0.1);
  });

  // The view was auto-generated by: https://github.com/pmndrs/gltfjsxposition but events and animations
  // have been added afterwards by me using some examples provided by the 'react-three-fiber' dev team.
  return (
    <group
      ref={group}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
      onClick={() => setClicked(!isClicked)}
    >
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh material={materials['screen.001']} geometry={nodes['Cube008_2'].geometry} />
        </group>
      </three.group>

      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />

      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>

      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  );
}

export default function Playground() {
  return (
    <Canvas camera={{ position: [-5, 0, -23], fov: 55 }} style={{ width: '100%', height: '100%' }}>
      {/* Generic and simple diffusion lighting */}
      <ambientLight />
      {/* Studio-like lighting (top-left-behind, top-right-behind, refractive light on the bottom) */}
      <directionalLight position={[1, 4, 0]} intensity={2} />
      <directionalLight position={[-1, 4, 0]} intensity={2} />
      <directionalLight position={[4, -6, -4]} intensity={1} />
      {/* Macbook Air model with simple open/close interaction */}
      <group rotation={[0, Math.PI, 0]} position={[0, 0, 0]}>
        <Laptop />
      </group>
      <OrbitControls maxDistance={30} minDistance={20} enableZoom={true} enablePan={false} />
    </Canvas>
  );
}
